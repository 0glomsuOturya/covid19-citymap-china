(()=>{var e={669:(e,t,r)=>{e.exports=r(609)},448:(e,t,r)=>{"use strict";var n=r(867),o=r(26),i=r(372),s=r(327),a=r(97),c=r(109),u=r(985),f=r(61),l=r(874),d=r(263);e.exports=function(e){return new Promise((function(t,r){var p,h=e.data,m=e.headers,v=e.responseType;function y(){e.cancelToken&&e.cancelToken.unsubscribe(p),e.signal&&e.signal.removeEventListener("abort",p)}n.isFormData(h)&&delete m["Content-Type"];var g=new XMLHttpRequest;if(e.auth){var b=e.auth.username||"",w=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";m.Authorization="Basic "+btoa(b+":"+w)}var x=a(e.baseURL,e.url);function E(){if(g){var n="getAllResponseHeaders"in g?c(g.getAllResponseHeaders()):null,i={data:v&&"text"!==v&&"json"!==v?g.response:g.responseText,status:g.status,statusText:g.statusText,headers:n,config:e,request:g};o((function(e){t(e),y()}),(function(e){r(e),y()}),i),g=null}}if(g.open(e.method.toUpperCase(),s(x,e.params,e.paramsSerializer),!0),g.timeout=e.timeout,"onloadend"in g?g.onloadend=E:g.onreadystatechange=function(){g&&4===g.readyState&&(0!==g.status||g.responseURL&&0===g.responseURL.indexOf("file:"))&&setTimeout(E)},g.onabort=function(){g&&(r(f("Request aborted",e,"ECONNABORTED",g)),g=null)},g.onerror=function(){r(f("Network Error",e,null,g)),g=null},g.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",n=e.transitional||l;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),r(f(t,e,n.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",g)),g=null},n.isStandardBrowserEnv()){var S=(e.withCredentials||u(x))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;S&&(m[e.xsrfHeaderName]=S)}"setRequestHeader"in g&&n.forEach(m,(function(e,t){void 0===h&&"content-type"===t.toLowerCase()?delete m[t]:g.setRequestHeader(t,e)})),n.isUndefined(e.withCredentials)||(g.withCredentials=!!e.withCredentials),v&&"json"!==v&&(g.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&g.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&g.upload&&g.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(p=function(e){g&&(r(!e||e&&e.type?new d("canceled"):e),g.abort(),g=null)},e.cancelToken&&e.cancelToken.subscribe(p),e.signal&&(e.signal.aborted?p():e.signal.addEventListener("abort",p))),h||(h=null),g.send(h)}))}},609:(e,t,r)=>{"use strict";var n=r(867),o=r(849),i=r(321),s=r(185),a=function e(t){var r=new i(t),a=o(i.prototype.request,r);return n.extend(a,i.prototype,r),n.extend(a,r),a.create=function(r){return e(s(t,r))},a}(r(546));a.Axios=i,a.Cancel=r(263),a.CancelToken=r(972),a.isCancel=r(502),a.VERSION=r(288).version,a.all=function(e){return Promise.all(e)},a.spread=r(713),a.isAxiosError=r(268),e.exports=a,e.exports.default=a},263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},972:(e,t,r)=>{"use strict";var n=r(263);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;this.promise.then((function(e){if(r._listeners){var t,n=r._listeners.length;for(t=0;t<n;t++)r._listeners[t](e);r._listeners=null}})),this.promise.then=function(e){var t,n=new Promise((function(e){r.subscribe(e),t=e})).then(e);return n.cancel=function(){r.unsubscribe(t)},n},e((function(e){r.reason||(r.reason=new n(e),t(r.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},o.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,r)=>{"use strict";var n=r(867),o=r(327),i=r(782),s=r(572),a=r(185),c=r(875),u=c.validators;function f(e){this.defaults=e,this.interceptors={request:new i,response:new i}}f.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=a(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var r=t.transitional;void 0!==r&&c.assertOptions(r,{silentJSONParsing:u.transitional(u.boolean),forcedJSONParsing:u.transitional(u.boolean),clarifyTimeoutError:u.transitional(u.boolean)},!1);var n=[],o=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(o=o&&e.synchronous,n.unshift(e.fulfilled,e.rejected))}));var i,f=[];if(this.interceptors.response.forEach((function(e){f.push(e.fulfilled,e.rejected)})),!o){var l=[s,void 0];for(Array.prototype.unshift.apply(l,n),l=l.concat(f),i=Promise.resolve(t);l.length;)i=i.then(l.shift(),l.shift());return i}for(var d=t;n.length;){var p=n.shift(),h=n.shift();try{d=p(d)}catch(e){h(e);break}}try{i=s(d)}catch(e){return Promise.reject(e)}for(;f.length;)i=i.then(f.shift(),f.shift());return i},f.prototype.getUri=function(e){return e=a(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},n.forEach(["delete","get","head","options"],(function(e){f.prototype[e]=function(t,r){return this.request(a(r||{},{method:e,url:t,data:(r||{}).data}))}})),n.forEach(["post","put","patch"],(function(e){f.prototype[e]=function(t,r,n){return this.request(a(n||{},{method:e,url:t,data:r}))}})),e.exports=f},782:(e,t,r)=>{"use strict";var n=r(867);function o(){this.handlers=[]}o.prototype.use=function(e,t,r){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){n.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},97:(e,t,r)=>{"use strict";var n=r(793),o=r(303);e.exports=function(e,t){return e&&!n(t)?o(e,t):t}},61:(e,t,r)=>{"use strict";var n=r(481);e.exports=function(e,t,r,o,i){var s=new Error(e);return n(s,t,r,o,i)}},572:(e,t,r)=>{"use strict";var n=r(867),o=r(527),i=r(502),s=r(546),a=r(263);function c(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new a("canceled")}e.exports=function(e){return c(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),n.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||s.adapter)(e).then((function(t){return c(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,r,n,o){return e.config=t,r&&(e.code=r),e.request=n,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}},185:(e,t,r)=>{"use strict";var n=r(867);e.exports=function(e,t){t=t||{};var r={};function o(e,t){return n.isPlainObject(e)&&n.isPlainObject(t)?n.merge(e,t):n.isPlainObject(t)?n.merge({},t):n.isArray(t)?t.slice():t}function i(r){return n.isUndefined(t[r])?n.isUndefined(e[r])?void 0:o(void 0,e[r]):o(e[r],t[r])}function s(e){if(!n.isUndefined(t[e]))return o(void 0,t[e])}function a(r){return n.isUndefined(t[r])?n.isUndefined(e[r])?void 0:o(void 0,e[r]):o(void 0,t[r])}function c(r){return r in t?o(e[r],t[r]):r in e?o(void 0,e[r]):void 0}var u={url:s,method:s,data:s,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:c};return n.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=u[e]||i,o=t(e);n.isUndefined(o)&&t!==c||(r[e]=o)})),r}},26:(e,t,r)=>{"use strict";var n=r(61);e.exports=function(e,t,r){var o=r.config.validateStatus;r.status&&o&&!o(r.status)?t(n("Request failed with status code "+r.status,r.config,null,r.request,r)):e(r)}},527:(e,t,r)=>{"use strict";var n=r(867),o=r(546);e.exports=function(e,t,r){var i=this||o;return n.forEach(r,(function(r){e=r.call(i,e,t)})),e}},546:(e,t,r)=>{"use strict";var n=r(867),o=r(16),i=r(481),s=r(874),a={"Content-Type":"application/x-www-form-urlencoded"};function c(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,f={transitional:s,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(u=r(448)),u),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(c(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)||t&&"application/json"===t["Content-Type"]?(c(t,"application/json"),function(e,t,r){if(n.isString(e))try{return(0,JSON.parse)(e),n.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||f.transitional,r=t&&t.silentJSONParsing,o=t&&t.forcedJSONParsing,s=!r&&"json"===this.responseType;if(s||o&&n.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(s){if("SyntaxError"===e.name)throw i(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};n.forEach(["delete","get","head"],(function(e){f.headers[e]={}})),n.forEach(["post","put","patch"],(function(e){f.headers[e]=n.merge(a)})),e.exports=f},874:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},288:e=>{e.exports={version:"0.26.1"}},849:e=>{"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},327:(e,t,r)=>{"use strict";var n=r(867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var i;if(r)i=r(t);else if(n.isURLSearchParams(t))i=t.toString();else{var s=[];n.forEach(t,(function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,(function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),s.push(o(t)+"="+o(e))})))})),i=s.join("&")}if(i){var a=e.indexOf("#");-1!==a&&(e=e.slice(0,a)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},372:(e,t,r)=>{"use strict";var n=r(867);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,o,i,s){var a=[];a.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),n.isString(o)&&a.push("path="+o),n.isString(i)&&a.push("domain="+i),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},268:(e,t,r)=>{"use strict";var n=r(867);e.exports=function(e){return n.isObject(e)&&!0===e.isAxiosError}},985:(e,t,r)=>{"use strict";var n=r(867);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=o(window.location.href),function(t){var r=n.isString(t)?o(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},16:(e,t,r)=>{"use strict";var n=r(867);e.exports=function(e,t){n.forEach(e,(function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])}))}},109:(e,t,r)=>{"use strict";var n=r(867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,i,s={};return e?(n.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=n.trim(e.substr(0,i)).toLowerCase(),r=n.trim(e.substr(i+1)),t){if(s[t]&&o.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([r]):s[t]?s[t]+", "+r:r}})),s):s}},713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},875:(e,t,r)=>{"use strict";var n=r(288).version,o={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){o[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}}));var i={};o.transitional=function(e,t,r){function o(e,t){return"[Axios v"+n+"] Transitional option '"+e+"'"+t+(r?". "+r:"")}return function(r,n,s){if(!1===e)throw new Error(o(n," has been removed"+(t?" in "+t:"")));return t&&!i[n]&&(i[n]=!0,console.warn(o(n," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(r,n,s)}},e.exports={assertOptions:function(e,t,r){if("object"!=typeof e)throw new TypeError("options must be an object");for(var n=Object.keys(e),o=n.length;o-- >0;){var i=n[o],s=t[i];if(s){var a=e[i],c=void 0===a||s(a,i,e);if(!0!==c)throw new TypeError("option "+i+" must be "+c)}else if(!0!==r)throw Error("Unknown option "+i)}},validators:o}},867:(e,t,r)=>{"use strict";var n=r(849),o=Object.prototype.toString;function i(e){return Array.isArray(e)}function s(e){return void 0===e}function a(e){return"[object ArrayBuffer]"===o.call(e)}function c(e){return null!==e&&"object"==typeof e}function u(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function f(e){return"[object Function]"===o.call(e)}function l(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:a,isBuffer:function(e){return null!==e&&!s(e)&&null!==e.constructor&&!s(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"[object FormData]"===o.call(e)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&a(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:c,isPlainObject:u,isUndefined:s,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:f,isStream:function(e){return c(e)&&f(e.pipe)},isURLSearchParams:function(e){return"[object URLSearchParams]"===o.call(e)},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:l,merge:function e(){var t={};function r(r,n){u(t[n])&&u(r)?t[n]=e(t[n],r):u(r)?t[n]=e({},r):i(r)?t[n]=r.slice():t[n]=r}for(var n=0,o=arguments.length;n<o;n++)l(arguments[n],r);return t},extend:function(e,t,r){return l(t,(function(t,o){e[o]=r&&"function"==typeof t?n(t,r):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},144:function(e,t){var r,n;r=function(e,t){"use strict";var r=5e3,n="callback";function o(){return"jsonp_"+Date.now()+"_"+Math.ceil(1e5*Math.random())}function i(e){try{delete window[e]}catch(t){window[e]=void 0}}function s(e){var t=document.getElementById(e);t&&document.getElementsByTagName("head")[0].removeChild(t)}t.exports=function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],a=e,c=t.timeout||r,u=t.jsonpCallback||n,f=void 0;return new Promise((function(r,n){var l=t.jsonpCallbackFunction||o(),d=u+"_"+l;window[l]=function(e){r({ok:!0,json:function(){return Promise.resolve(e)}}),f&&clearTimeout(f),s(d),i(l)},a+=-1===a.indexOf("?")?"?":"&";var p=document.createElement("script");p.setAttribute("src",""+a+u+"="+l),t.charset&&p.setAttribute("charset",t.charset),t.nonce&&p.setAttribute("nonce",t.nonce),t.referrerPolicy&&p.setAttribute("referrerPolicy",t.referrerPolicy),p.id=d,document.getElementsByTagName("head")[0].appendChild(p),f=setTimeout((function(){n(new Error("JSONP request to "+e+" timed out")),i(l),s(d),window[l]=function(){i(l)}}),c),p.onerror=function(){n(new Error("JSONP request to "+e+" failed")),i(l),s(d),f&&clearTimeout(f)}}))}},void 0===(n=r.apply(t,[t,e]))||(e.exports=n)},182:function(e,t,r){"use strict";e=r.nmd(e);var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},s=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)s.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return s};t.__esModule=!0,t.getColor=t.getConfirmedCount=t.loadData=void 0;var a=r(856),c=r(669),u=r(144),f=new Set(a),l=new Map;f.forEach((function(e){l.set(e.substr(0,2),e)}));var d=[[0,"#FFDFDF"],[10,"#FFBFBF"],[20,"#FF9F9F"],[30,"#FF7F7F"],[40,"#FF5F5F"],[50,"#FF3F3F"],[60,"#FF1F1F"],[70,"#FF0000"],[80,"#E70000"],[90,"#CF0000"],[100,"#B80000"],[200,"#A00000"],[500,"#880000"],[1e3,"#710000"],[2e3,"#590000"],[5e3,"#420000"]],p=new Set(["外地来京人员","未知","未明确地区","所属地待确认","待确认","地区待确认","境外输入","境外输入人员","外省输入","省十里丰监狱","雄安新区"]),h=new Map([["北京","北京市"],["天津","天津市"],["上海","上海市"],["香港","香港特别行政区"],["澳门","澳门特别行政区"],["台湾","台湾省"]]),m=new Map([["巩义","郑州市"],["固始","信阳市"],["滑县","安阳市"],["长垣","新乡市"],["永城","商丘市"],["邓州","南阳市"],["韩城","渭南市"],["杨凌示范区","咸阳市"],["宁东","银川市"],["满洲里","呼伦贝尔市"],["阿拉善盟","阿拉善盟"],["大兴安岭","大兴安岭地区"],["宿松","安庆市"],["赣江新区","南昌市"],["公主岭","四平市"],["梅河口","通化市"],["两江新区","渝北区"],["万盛","綦江区"],["第四师","可克达拉市"],["第六师","五家渠市"],["第七师","塔城地区"],["第八师","石河子市"],["第九师","塔城地区"],["第十二师","乌鲁木齐市"]]),v=new Map([["重庆-高新区","九龙坡区"]]);function y(){return n(this,void 0,void 0,(function(){var e,t;return o(this,(function(r){switch(r.label){case 0:return e="https://news.sina.com.cn/project/fymap/ncp2020_full_data.json",document?[4,u(e,{jsonpCallbackFunction:"jsoncallback"})]:[3,3];case 1:return[4,r.sent().json()];case 2:return[2,r.sent().data.list];case 3:return[4,c.default.get(e)];case 4:return t=r.sent(),[2,JSON.parse(t.data.replace(/^jsoncallback\(|\)\;/g,"")).data.list]}}))}))}function g(e,t){return v.has(e+"-"+t)?v.get(e+"-"+t):m.has(t)?m.get(t):(console.log("!!!Cannot match, discard:",e,t),"")}function b(e){var t,r,n,o,s=new Map;try{for(var a=i(e),c=a.next();!c.done;c=a.next()){var u=c.value;if(h.has(u.name)){var l=Number(u.econNum);"上海"==u.name&&(l+=Number(u.asymptomNum)),s.set(h.get(u.name),l)}else try{for(var d=(n=void 0,i(u.city)),m=d.next();!m.done;m=d.next()){var v=m.value,y=u.name,b=v.name,w=Number(v.econNum);if(0!=w&&!p.has(b)){var x=v.mapName;(f.has(x)||""!=(x=g(y,b)))&&(s.has(x)?s.set(x,s.get(x)+w):s.set(x,w))}}}catch(e){n={error:e}}finally{try{m&&!m.done&&(o=d.return)&&o.call(d)}finally{if(n)throw n.error}}}}catch(e){t={error:e}}finally{try{c&&!c.done&&(r=a.return)&&r.call(a)}finally{if(t)throw t.error}}return console.log("confirmedCount",s),s}t.loadData=y,t.getConfirmedCount=b,t.getColor=function(e){var t,r;if(0==e)return"#FFFFFF";try{for(var n=i(d.entries()),o=n.next();!o.done;o=n.next()){var a=s(o.value,2),c=a[0],u=s(a[1],1)[0];if(0!=c&&e<u)return d[c-1][1]}}catch(e){t={error:e}}finally{try{o&&!o.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}return"#420000"},r.c[r.s]===e&&y().then((function(e){b(e)}))},138:(e,t,r)=>{"use strict";var n=r(182);let o,i,s,a;const c={backgroundColor:"#FFFFFF"};let u=new Map;const f=new Map;function l(e){let t=0;return u.has(e)&&(t=u.get(e)),t}function d(e){return(0,n.getColor)(l(e))}function p(e){const t=e.pixel;let r=i.getDistrictByContainerPos(t);if(r||(r=s.getDistrictByContainerPos(t)),r){const e=":";if(["110000","120000","310000","710000","810000","820000"].includes(r.adcode_pro.toString())){const t=r.NAME_CHN.replace("市","")+e+l(r.NAME_CHN),n=new AMap.LabelMarker({position:[r.x,r.y],text:{content:t,style:c},rank:2});a.add(n)}else AMap.plugin("AMap.DistrictSearch",(function(){const t="500000"==r.adcode_pro.toString(),n=t?2:1;function o(n){if(t){for(const t of n.districtList[0].districtList[0].districtList){let n=l(t.name);if(0==n)continue;const o={position:t.center,text:{content:t.name+e+n,style:c},rank:t.adcode==r.adcode.toString()?2:1},i=new AMap.LabelMarker(o);a.add(i)}let t=0;const o=n.districtList[0].districtList[1];for(const e of o.districtList)t+=l(e.name);if(t>0){const n={position:o.center,text:{content:o.name+e+t,style:c},rank:"500100"==r.adcode_cit.toString()?2:1},i=new AMap.LabelMarker(n);a.add(i)}}else for(const t of n.districtList[0].districtList){let n=l(t.name);if(0==n)continue;const o=t.name.replace("市","")+e+n,i={position:t.center,text:{content:o,style:c},rank:t.adcode==r.adcode.toString()?2:1},s=new AMap.LabelMarker(i);a.add(s)}}const i=new AMap.DistrictSearch({level:"district",subdistrict:n}),s=r.adcode_pro.toString();f.get(s)?o(f.get(s)):i.search(s,(function(e,t){"complete"==e&&(f.set(s,t),o(t))}))}))}}document.addEventListener("DOMContentLoaded",(function(){(0,n.loadData)().then((e=>{u=(0,n.getConfirmedCount)(e),u.get("徐州市")&&u.set("邳州市",u.get("徐州市")),u.get("济南市")&&u.set("莱芜市",u.get("济南市")),o=new AMap.Map("container",{zoom:window.screen.width<=600?3:4,center:[104.5,38.5],pitch:0,viewMode:"3D"}),i=new AMap.DistrictLayer.Province({zIndex:12,adcode:["110000","120000","130000","140000","150000","210000","220000","230000","310000","320000","330000","340000","350000","360000","370000","410000","420000","430000","440000","450000","460000","510000","520000","530000","540000","610000","620000","630000","640000","650000","710000","810000","820000"],depth:1,styles:{fill:function(e){return d(e.NAME_CHN)},"province-stroke":"black","city-stroke":"cornflowerblue","county-stroke":"rgba(255,255,255,0.5)"}}),i.setMap(o),s=new AMap.DistrictLayer.Province({zIndex:12,adcode:["500000"],depth:2,styles:{fill:function(e){return d(e.NAME_CHN)},"province-stroke":"black","city-stroke":"cornflowerblue","county-stroke":"rgba(255,255,255,0.5)"}}),s.setMap(o),o.on("complete",(function(){a=new AMap.LabelsLayer({fitView:!0}),o.add(a),o.on("click",p)}))}))}))},856:e=>{"use strict";e.exports=JSON.parse('["北京市","天津市","石家庄市","唐山市","秦皇岛市","邯郸市","邢台市","保定市","张家口市","承德市","沧州市","廊坊市","衡水市","太原市","大同市","阳泉市","长治市","晋城市","朔州市","晋中市","运城市","忻州市","临汾市","吕梁市","呼和浩特市","包头市","乌海市","赤峰市","通辽市","鄂尔多斯市","呼伦贝尔市","巴彦淖尔市","乌兰察布市","兴安盟","锡林郭勒盟","阿拉善盟","沈阳市","大连市","鞍山市","抚顺市","本溪市","丹东市","锦州市","营口市","阜新市","辽阳市","盘锦市","铁岭市","朝阳市","葫芦岛市","长春市","吉林市","四平市","辽源市","通化市","白山市","松原市","白城市","延边朝鲜族自治州","哈尔滨市","齐齐哈尔市","鸡西市","鹤岗市","双鸭山市","大庆市","伊春市","佳木斯市","七台河市","牡丹江市","黑河市","绥化市","大兴安岭地区","上海市","南京市","无锡市","徐州市","常州市","苏州市","南通市","连云港市","淮安市","盐城市","扬州市","镇江市","泰州市","宿迁市","杭州市","宁波市","温州市","嘉兴市","湖州市","绍兴市","金华市","衢州市","舟山市","台州市","丽水市","合肥市","芜湖市","蚌埠市","淮南市","马鞍山市","淮北市","铜陵市","安庆市","黄山市","滁州市","阜阳市","宿州市","六安市","亳州市","池州市","宣城市","福州市","厦门市","莆田市","三明市","泉州市","漳州市","南平市","龙岩市","宁德市","南昌市","景德镇市","萍乡市","九江市","新余市","鹰潭市","赣州市","吉安市","宜春市","抚州市","上饶市","济南市","青岛市","淄博市","枣庄市","东营市","烟台市","潍坊市","济宁市","泰安市","威海市","日照市","莱芜市","临沂市","德州市","聊城市","滨州市","菏泽市","郑州市","开封市","洛阳市","平顶山市","安阳市","鹤壁市","新乡市","焦作市","濮阳市","许昌市","漯河市","三门峡市","南阳市","商丘市","信阳市","周口市","驻马店市","济源市","武汉市","黄石市","十堰市","宜昌市","襄阳市","鄂州市","荆门市","孝感市","荆州市","黄冈市","咸宁市","随州市","恩施土家族苗族自治州","仙桃市","潜江市","天门市","神农架林区","长沙市","株洲市","湘潭市","衡阳市","邵阳市","岳阳市","常德市","张家界市","益阳市","郴州市","永州市","怀化市","娄底市","湘西土家族苗族自治州","广州市","韶关市","深圳市","珠海市","汕头市","佛山市","江门市","湛江市","茂名市","肇庆市","惠州市","梅州市","汕尾市","河源市","阳江市","清远市","东莞市","中山市","东沙群岛","潮州市","揭阳市","云浮市","南宁市","柳州市","桂林市","梧州市","北海市","防城港市","钦州市","贵港市","玉林市","百色市","贺州市","河池市","来宾市","崇左市","海口市","三亚市","三沙市","儋州市","五指山市","琼海市","文昌市","万宁市","东方市","定安县","屯昌县","澄迈县","临高县","白沙黎族自治县","昌江黎族自治县","乐东黎族自治县","陵水黎族自治县","保亭黎族苗族自治县","琼中黎族苗族自治县","重庆市","万州区","涪陵区","渝中区","大渡口区","江北区","沙坪坝区","九龙坡区","南岸区","北碚区","綦江区","大足区","渝北区","巴南区","黔江区","长寿区","江津区","合川区","永川区","南川区","璧山区","铜梁区","潼南区","荣昌区","开州区","梁平区","武隆区","城口县","丰都县","垫江县","忠县","云阳县","奉节县","巫山县","巫溪县","石柱土家族自治县","秀山土家族苗族自治县","酉阳土家族苗族自治县","彭水苗族土家族自治县","成都市","自贡市","攀枝花市","泸州市","德阳市","绵阳市","广元市","遂宁市","内江市","乐山市","南充市","眉山市","宜宾市","广安市","达州市","雅安市","巴中市","资阳市","阿坝藏族羌族自治州","甘孜藏族自治州","凉山彝族自治州","贵阳市","六盘水市","遵义市","安顺市","毕节市","铜仁市","黔西南布依族苗族自治州","黔东南苗族侗族自治州","黔南布依族苗族自治州","昆明市","曲靖市","玉溪市","保山市","昭通市","丽江市","普洱市","临沧市","楚雄彝族自治州","红河哈尼族彝族自治州","文山壮族苗族自治州","西双版纳傣族自治州","大理白族自治州","德宏傣族景颇族自治州","怒江傈僳族自治州","迪庆藏族自治州","拉萨市","日喀则市","昌都市","林芝市","山南市","那曲市","阿里地区","西安市","铜川市","宝鸡市","咸阳市","渭南市","延安市","汉中市","榆林市","安康市","商洛市","兰州市","嘉峪关市","金昌市","白银市","天水市","武威市","张掖市","平凉市","酒泉市","庆阳市","定西市","陇南市","临夏回族自治州","甘南藏族自治州","西宁市","海东市","海北藏族自治州","黄南藏族自治州","海南藏族自治州","果洛藏族自治州","玉树藏族自治州","海西蒙古族藏族自治州","银川市","石嘴山市","吴忠市","固原市","中卫市","乌鲁木齐市","克拉玛依市","吐鲁番市","哈密市","昌吉回族自治州","博尔塔拉蒙古自治州","巴音郭楞蒙古自治州","阿克苏地区","克孜勒苏柯尔克孜自治州","喀什地区","和田地区","伊犁哈萨克自治州","塔城地区","阿勒泰地区","石河子市","阿拉尔市","图木舒克市","五家渠市","北屯市","铁门关市","双河市","可克达拉市","昆玉市","台湾","香港","澳门"]')}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.loaded=!0,i.exports}r.c=t,r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),r(r.s=138)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MmMsV0FBVTNjLEVBQU8yYyxTQUFXLElBQ2pDM2MsR0NBa0I0YixFQUFvQkEsRUFBb0JnQixFQUFJLE0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmV0Y2gtanNvbnAvYnVpbGQvZmV0Y2gtanNvbnAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xvYWRfZGF0YS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovLy93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIHRyYW5zaXRpb25hbERlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMvdHJhbnNpdGlvbmFsJyk7XG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG4gICAgdmFyIHJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgdmFyIG9uQ2FuY2VsZWQ7XG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8ICByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/ICdFVElNRURPVVQnIDogJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbiB8fCBjb25maWcuc2lnbmFsKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgb25DYW5jZWxlZCA9IGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgKGNhbmNlbCAmJiBjYW5jZWwudHlwZSkgPyBuZXcgQ2FuY2VsKCdjYW5jZWxlZCcpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIC8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbiAgaW5zdGFuY2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGRlZmF1bHRDb25maWcsIGluc3RhbmNlQ29uZmlnKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuYXhpb3MuVkVSU0lPTiA9IHJlcXVpcmUoJy4vZW52L2RhdGEnKS52ZXJzaW9uO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG5cbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4oZnVuY3Rpb24oY2FuY2VsKSB7XG4gICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbCA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgIH1cbiAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4gPSBmdW5jdGlvbihvbmZ1bGZpbGxlZCkge1xuICAgIHZhciBfcmVzb2x2ZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuXG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgfVxufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xudmFyIHZhbGlkYXRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdmFsaWRhdG9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWw7XG5cbiAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgIH0sIGZhbHNlKTtcbiAgfVxuXG4gIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgdmFyIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHZhciBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHByb21pc2U7XG5cbiAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuXG4gICAgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICBjaGFpbiA9IGNoYWluLmNvbmNhdChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuXG4gIHZhciBuZXdDb25maWcgPSBjb25maWc7XG4gIHdoaWxlIChyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICB2YXIgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHZhciBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB0cnkge1xuICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25SZWplY3RlZChlcnJvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QobmV3Q29uZmlnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgd2hpbGUgKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZCxcbiAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWwnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWwoJ2NhbmNlbGVkJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMucmVzcG9uc2UgJiYgdGhpcy5yZXNwb25zZS5zdGF0dXMgPyB0aGlzLnJlc3BvbnNlLnN0YXR1cyA6IG51bGxcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbWVyZ2VNYXAgPSB7XG4gICAgJ3VybCc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ21ldGhvZCc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ2RhdGEnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdiYXNlVVJMJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNmb3JtUmVxdWVzdCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zZm9ybVJlc3BvbnNlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncGFyYW1zU2VyaWFsaXplcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RpbWVvdXQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0aW1lb3V0TWVzc2FnZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3dpdGhDcmVkZW50aWFscyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2FkYXB0ZXInOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdyZXNwb25zZVR5cGUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd4c3JmQ29va2llTmFtZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25VcGxvYWRQcm9ncmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ29uRG93bmxvYWRQcm9ncmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2RlY29tcHJlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhDb250ZW50TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnbWF4Qm9keUxlbmd0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zcG9ydCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2h0dHBBZ2VudCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2h0dHBzQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdjYW5jZWxUb2tlbic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3NvY2tldFBhdGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdyZXNwb25zZUVuY29kaW5nJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndmFsaWRhdGVTdGF0dXMnOiBtZXJnZURpcmVjdEtleXNcbiAgfTtcblxuICB1dGlscy5mb3JFYWNoKE9iamVjdC5rZXlzKGNvbmZpZzEpLmNvbmNhdChPYmplY3Qua2V5cyhjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgdmFyIG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICB2YXIgY29uZmlnVmFsdWUgPSBtZXJnZShwcm9wKTtcbiAgICAodXRpbHMuaXNVbmRlZmluZWQoY29uZmlnVmFsdWUpICYmIG1lcmdlICE9PSBtZXJnZURpcmVjdEtleXMpIHx8IChjb25maWdbcHJvcF0gPSBjb25maWdWYWx1ZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICB2YXIgY29udGV4dCA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29udGV4dCwgZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9lbmhhbmNlRXJyb3InKTtcbnZhciB0cmFuc2l0aW9uYWxEZWZhdWx0cyA9IHJlcXVpcmUoJy4vdHJhbnNpdGlvbmFsJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4uL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDogdHJhbnNpdGlvbmFsRGVmYXVsdHMsXG5cbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSB8fCAoaGVhZGVycyAmJiBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgdmFyIHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICB2YXIgc2lsZW50SlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLnNpbGVudEpTT05QYXJzaW5nO1xuICAgIHZhciBmb3JjZWRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuZm9yY2VkSlNPTlBhcnNpbmc7XG4gICAgdmFyIHN0cmljdEpTT05QYXJzaW5nID0gIXNpbGVudEpTT05QYXJzaW5nICYmIHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcgfHwgKGZvcmNlZEpTT05QYXJzaW5nICYmIHV0aWxzLmlzU3RyaW5nKGRhdGEpICYmIGRhdGEubGVuZ3RoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChzdHJpY3RKU09OUGFyc2luZykge1xuICAgICAgICAgIGlmIChlLm5hbWUgPT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IGVuaGFuY2VFcnJvcihlLCB0aGlzLCAnRV9KU09OX1BBUlNFJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICBjbGFyaWZ5VGltZW91dEVycm9yOiBmYWxzZVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcInZlcnNpb25cIjogXCIwLjI2LjFcIlxufTsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZCtcXC0uXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gdXRpbHMuaXNPYmplY3QocGF5bG9hZCkgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFZFUlNJT04gPSByZXF1aXJlKCcuLi9lbnYvZGF0YScpLnZlcnNpb247XG5cbnZhciB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaChmdW5jdGlvbih0eXBlLCBpKSB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG52YXIgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvcHQsIG9wdHMpIHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIHZhciBvcHQgPSBrZXlzW2ldO1xuICAgIHZhciB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IEVycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0KTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzc2VydE9wdGlvbnM6IGFzc2VydE9wdGlvbnMsXG4gIHZhbGlkYXRvcnM6IHZhbGlkYXRvcnNcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGb3JtRGF0YV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmIChpc0FycmF5QnVmZmVyKHZhbC5idWZmZXIpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsKSB7XG4gIGlmICh0b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgVVJMU2VhcmNoUGFyYW1zXSc7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci50cmltID8gc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICogQHJldHVybiB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQk9NKGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltLFxuICBzdHJpcEJPTTogc3RyaXBCT01cbn07XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdtb2R1bGUnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCBtb2R1bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgbW9kKTtcbiAgICBnbG9iYWwuZmV0Y2hKc29ucCA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgbW9kdWxlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgdGltZW91dDogNTAwMCxcbiAgICBqc29ucENhbGxiYWNrOiAnY2FsbGJhY2snLFxuICAgIGpzb25wQ2FsbGJhY2tGdW5jdGlvbjogbnVsbFxuICB9O1xuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlQ2FsbGJhY2tGdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ2pzb25wXycgKyBEYXRlLm5vdygpICsgJ18nICsgTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDApO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJGdW5jdGlvbihmdW5jdGlvbk5hbWUpIHtcbiAgICAvLyBJRTggdGhyb3dzIGFuIGV4Y2VwdGlvbiB3aGVuIHlvdSB0cnkgdG8gZGVsZXRlIGEgcHJvcGVydHkgb24gd2luZG93XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTgyNDIyOC83NTEwODlcbiAgICB0cnkge1xuICAgICAgZGVsZXRlIHdpbmRvd1tmdW5jdGlvbk5hbWVdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHdpbmRvd1tmdW5jdGlvbk5hbWVdID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVNjcmlwdChzY3JpcHRJZCkge1xuICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzY3JpcHRJZCk7XG4gICAgaWYgKHNjcmlwdCkge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZldGNoSnNvbnAoX3VybCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMV07XG5cbiAgICAvLyB0byBhdm9pZCBwYXJhbSByZWFzc2lnblxuICAgIHZhciB1cmwgPSBfdXJsO1xuICAgIHZhciB0aW1lb3V0ID0gb3B0aW9ucy50aW1lb3V0IHx8IGRlZmF1bHRPcHRpb25zLnRpbWVvdXQ7XG4gICAgdmFyIGpzb25wQ2FsbGJhY2sgPSBvcHRpb25zLmpzb25wQ2FsbGJhY2sgfHwgZGVmYXVsdE9wdGlvbnMuanNvbnBDYWxsYmFjaztcblxuICAgIHZhciB0aW1lb3V0SWQgPSB1bmRlZmluZWQ7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGNhbGxiYWNrRnVuY3Rpb24gPSBvcHRpb25zLmpzb25wQ2FsbGJhY2tGdW5jdGlvbiB8fCBnZW5lcmF0ZUNhbGxiYWNrRnVuY3Rpb24oKTtcbiAgICAgIHZhciBzY3JpcHRJZCA9IGpzb25wQ2FsbGJhY2sgKyAnXycgKyBjYWxsYmFja0Z1bmN0aW9uO1xuXG4gICAgICB3aW5kb3dbY2FsbGJhY2tGdW5jdGlvbl0gPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgb2s6IHRydWUsXG4gICAgICAgICAgLy8ga2VlcCBjb25zaXN0ZW50IHdpdGggZmV0Y2ggQVBJXG4gICAgICAgICAganNvbjogZnVuY3Rpb24ganNvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRpbWVvdXRJZCkgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG5cbiAgICAgICAgcmVtb3ZlU2NyaXB0KHNjcmlwdElkKTtcblxuICAgICAgICBjbGVhckZ1bmN0aW9uKGNhbGxiYWNrRnVuY3Rpb24pO1xuICAgICAgfTtcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIHVzZXIgc2V0IHRoZWlyIG93biBwYXJhbXMsIGFuZCBpZiBub3QgYWRkIGEgPyB0byBzdGFydCBhIGxpc3Qgb2YgcGFyYW1zXG4gICAgICB1cmwgKz0gdXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJic7XG5cbiAgICAgIHZhciBqc29ucFNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAganNvbnBTY3JpcHQuc2V0QXR0cmlidXRlKCdzcmMnLCAnJyArIHVybCArIGpzb25wQ2FsbGJhY2sgKyAnPScgKyBjYWxsYmFja0Z1bmN0aW9uKTtcbiAgICAgIGlmIChvcHRpb25zLmNoYXJzZXQpIHtcbiAgICAgICAganNvbnBTY3JpcHQuc2V0QXR0cmlidXRlKCdjaGFyc2V0Jywgb3B0aW9ucy5jaGFyc2V0KTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLm5vbmNlKSB7XG4gICAgICAgIGpzb25wU2NyaXB0LnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBvcHRpb25zLm5vbmNlKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLnJlZmVycmVyUG9saWN5KSB7XG4gICAgICAgIGpzb25wU2NyaXB0LnNldEF0dHJpYnV0ZSgncmVmZXJyZXJQb2xpY3knLCBvcHRpb25zLnJlZmVycmVyUG9saWN5KTtcbiAgICAgIH1cbiAgICAgIGpzb25wU2NyaXB0LmlkID0gc2NyaXB0SWQ7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKGpzb25wU2NyaXB0KTtcblxuICAgICAgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0pTT05QIHJlcXVlc3QgdG8gJyArIF91cmwgKyAnIHRpbWVkIG91dCcpKTtcblxuICAgICAgICBjbGVhckZ1bmN0aW9uKGNhbGxiYWNrRnVuY3Rpb24pO1xuICAgICAgICByZW1vdmVTY3JpcHQoc2NyaXB0SWQpO1xuICAgICAgICB3aW5kb3dbY2FsbGJhY2tGdW5jdGlvbl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2xlYXJGdW5jdGlvbihjYWxsYmFja0Z1bmN0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgICAvLyBDYXVnaHQgaWYgZ290IDQwNC81MDBcbiAgICAgIGpzb25wU2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0pTT05QIHJlcXVlc3QgdG8gJyArIF91cmwgKyAnIGZhaWxlZCcpKTtcblxuICAgICAgICBjbGVhckZ1bmN0aW9uKGNhbGxiYWNrRnVuY3Rpb24pO1xuICAgICAgICByZW1vdmVTY3JpcHQoc2NyaXB0SWQpO1xuICAgICAgICBpZiAodGltZW91dElkKSBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICAvLyBleHBvcnQgYXMgZ2xvYmFsIGZ1bmN0aW9uXG4gIC8qXG4gIGxldCBsb2NhbDtcbiAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbG9jYWwgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbG9jYWwgPSBzZWxmO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBsb2NhbCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdwb2x5ZmlsbCBmYWlsZWQgYmVjYXVzZSBnbG9iYWwgb2JqZWN0IGlzIHVuYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQnKTtcbiAgICB9XG4gIH1cbiAgbG9jYWwuZmV0Y2hKc29ucCA9IGZldGNoSnNvbnA7XG4gICovXG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmZXRjaEpzb25wO1xufSk7IiwiaW1wb3J0ICogYXMgY2l0aWVzIGZyb20gJy4vdmFsaWRfY2l0eV9uYW1lcy5qc29uJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgKiBhcyBmZXRjaEpzb25wIGZyb20gJ2ZldGNoLWpzb25wJztcblxuY29uc3QgY2l0eU5hbWVzID0gbmV3IFNldDxzdHJpbmc+KGNpdGllcyk7XG5jb25zdCBjaXR5TmFtZVNob3J0VG9GdWxsID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcbmNpdHlOYW1lcy5mb3JFYWNoKChjaXR5TmFtZSkgPT4ge1xuICBjaXR5TmFtZVNob3J0VG9GdWxsLnNldChjaXR5TmFtZS5zdWJzdHIoMCwgMiksIGNpdHlOYW1lKTtcbn0pO1xuY29uc3QgY29sb3JzOiBBcnJheTxbbnVtYmVyLCBzdHJpbmddPiA9IFtcbiAgWzAsICcjRkZERkRGJ10sXG4gIFsxMCwgJyNGRkJGQkYnXSxcbiAgWzIwLCAnI0ZGOUY5RiddLFxuICBbMzAsICcjRkY3RjdGJ10sXG4gIFs0MCwgJyNGRjVGNUYnXSxcbiAgWzUwLCAnI0ZGM0YzRiddLFxuICBbNjAsICcjRkYxRjFGJ10sXG4gIFs3MCwgJyNGRjAwMDAnXSxcbiAgWzgwLCAnI0U3MDAwMCddLFxuICBbOTAsICcjQ0YwMDAwJ10sXG4gIFsxMDAsICcjQjgwMDAwJ10sXG4gIFsyMDAsICcjQTAwMDAwJ10sXG4gIFs1MDAsICcjODgwMDAwJ10sXG4gIFsxMDAwLCAnIzcxMDAwMCddLFxuICBbMjAwMCwgJyM1OTAwMDAnXSxcbiAgWzUwMDAsICcjNDIwMDAwJ10sXG5dO1xuXG4vLyDlv73nlaXpg6jliIblhoXlrrlcbmNvbnN0IGlnbm9yZUxpc3QgPSBuZXcgU2V0KFtcbiAgJ+WkluWcsOadpeS6rOS6uuWRmCcsXG4gICfmnKrnn6UnLFxuICAn5pyq5piO56Gu5Zyw5Yy6JyxcbiAgJ+aJgOWxnuWcsOW+heehruiupCcsXG4gICflvoXnoa7orqQnLFxuICAn5Zyw5Yy65b6F56Gu6K6kJyxcbiAgJ+Wig+Wklui+k+WFpScsXG4gICflooPlpJbovpPlhaXkurrlkZgnLFxuICAn5aSW55yB6L6T5YWlJyxcbiAgJ+ecgeWNgemHjOS4sOebkeeLsScsXG4gICfpm4TlronmlrDljLonLFxuXSk7XG5cbmNvbnN0IG11bmljaXBhbGl0eUxpc3QgPSBuZXcgTWFwKFtcbiAgWyfljJfkuqwnLCAn5YyX5Lqs5biCJ10sXG4gIFsn5aSp5rSlJywgJ+Wkqea0peW4giddLFxuICBbJ+S4iua1tycsICfkuIrmtbfluIInXSxcbiAgLy8g6YeN5bqG6Z2i56ev5aSq5aSn77yM5LiN6YCC5ZCI5L2c5Li65Y2V5LiA5Zyw5Yy65aSE55CGXG4gIFsn6aaZ5rivJywgJ+mmmea4r+eJueWIq+ihjOaUv+WMuiddLFxuICBbJ+a+s+mXqCcsICfmvrPpl6jnibnliKvooYzmlL/ljLonXSxcbiAgWyflj7Dmub4nLCAn5Y+w5rm+55yBJ10sXG5dKTtcblxuLy8g5omL5Yqo5pig5bCEXG4vLyDpq5jlvrflnLDlm77ph4zmsqHmnInkuKTmsZ/mlrDljLrvvIzlp5HkuJTnrpflhaXmuJ3ljJdcbmNvbnN0IG1hbnVhbE1hcHBpbmcgPSBuZXcgTWFwKFtcbiAgWyflt6nkuYknLCAn6YOR5bee5biCJ10sXG4gIFsn5Zu65aeLJywgJ+S/oemYs+W4giddLFxuICBbJ+a7keWOvycsICflronpmLPluIInXSxcbiAgWyfplb/lnqMnLCAn5paw5Lmh5biCJ10sXG4gIFsn5rC45Z+OJywgJ+WVhuS4mOW4giddLFxuICBbJ+mCk+W3nicsICfljZfpmLPluIInXSxcbiAgWyfpn6nln44nLCAn5rit5Y2X5biCJ10sXG4gIFsn5p2o5YeM56S66IyD5Yy6JywgJ+WSuOmYs+W4giddLFxuICBbJ+WugeS4nCcsICfpk7blt53luIInXSxcbiAgWyfmu6HmtLLph4wnLCAn5ZG85Lym6LSd5bCU5biCJ10sXG4gIFsn6Zi/5ouJ5ZaE55ufJywgJ+mYv+aLieWWhOebnyddLFxuICBbJ+Wkp+WFtOWuieWyrScsICflpKflhbTlronlsq3lnLDljLonXSxcbiAgWyflrr/mnb4nLCAn5a6J5bqG5biCJ10sXG4gIFsn6LWj5rGf5paw5Yy6JywgJ+WNl+aYjOW4giddLFxuICBbJ+WFrOS4u+WyrScsICflm5vlubPluIInXSxcbiAgWyfmooXmsrPlj6MnLCAn6YCa5YyW5biCJ10sXG4gIFsn5Lik5rGf5paw5Yy6JywgJ+a4neWMl+WMuiddLFxuICBbJ+S4h+ebmycsICfntqbmsZ/ljLonXSxcbiAgWyfnrKzlm5vluIgnLCAn5Y+v5YWL6L6+5ouJ5biCJ10sXG4gIFsn56ys5YWt5biIJywgJ+S6lOWutua4oOW4giddLFxuICBbJ+esrOS4g+W4iCcsICfloZTln47lnLDljLonXSxcbiAgWyfnrKzlhavluIgnLCAn55+z5rKz5a2Q5biCJ10sXG4gIFsn56ys5Lmd5biIJywgJ+WhlOWfjuWcsOWMuiddLFxuICBbJ+esrOWNgeS6jOW4iCcsICfkuYzpsoHmnKjpvZDluIInXSxcbl0pO1xuXG5jb25zdCBtYW51YWxNYXBwaW5nV2l0aFByb3ZpbmNlID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oW1sn6YeN5bqGLemrmOaWsOWMuicsICfkuZ3pvpnlnaHljLonXV0pO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZERhdGEoKTogUHJvbWlzZTxBcnJheTxhbnk+PiB7XG4gIGNvbnN0IHVybCA9ICdodHRwczovL25ld3Muc2luYS5jb20uY24vcHJvamVjdC9meW1hcC9uY3AyMDIwX2Z1bGxfZGF0YS5qc29uJztcbiAgaWYgKGRvY3VtZW50KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZmV0Y2hKc29ucCh1cmwsIHtcbiAgICAgIGpzb25wQ2FsbGJhY2tGdW5jdGlvbjogJ2pzb25jYWxsYmFjaycsXG4gICAgfSk7XG5cbiAgICBjb25zdCBqID0gYXdhaXQgcmVzdWx0Lmpzb24oKTtcbiAgICBjb25zdCBkYXRhID0gai5kYXRhLmxpc3Q7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsKTtcbiAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShyZXNwb25zZS5kYXRhLnJlcGxhY2UoL15qc29uY2FsbGJhY2tcXCh8XFwpXFw7L2csICcnKSkuZGF0YS5saXN0O1xuICAgIHJldHVybiBkYXRhO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNpdHlOYW1lKHByb3ZpbmNlTmFtZTogc3RyaW5nLCBjaXR5TmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgLy8g5omL5Yqo6KeE5YiZXG4gIGlmIChtYW51YWxNYXBwaW5nV2l0aFByb3ZpbmNlLmhhcyhwcm92aW5jZU5hbWUgKyAnLScgKyBjaXR5TmFtZSkpIHtcbiAgICByZXR1cm4gbWFudWFsTWFwcGluZ1dpdGhQcm92aW5jZS5nZXQocHJvdmluY2VOYW1lICsgJy0nICsgY2l0eU5hbWUpO1xuICB9XG4gIGlmIChtYW51YWxNYXBwaW5nLmhhcyhjaXR5TmFtZSkpIHtcbiAgICByZXR1cm4gbWFudWFsTWFwcGluZy5nZXQoY2l0eU5hbWUpO1xuICB9XG4gIGNvbnNvbGUubG9nKCchISFDYW5ub3QgbWF0Y2gsIGRpc2NhcmQ6JywgcHJvdmluY2VOYW1lLCBjaXR5TmFtZSk7XG4gIHJldHVybiAnJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbmZpcm1lZENvdW50KGRhdGEpOiBNYXA8c3RyaW5nLCBudW1iZXI+IHtcbiAgY29uc3QgY29uZmlybWVkQ291bnQgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xuICBmb3IgKGNvbnN0IHByb3ZpbmNlRGF0YSBvZiBkYXRhKSB7XG4gICAgaWYgKG11bmljaXBhbGl0eUxpc3QuaGFzKHByb3ZpbmNlRGF0YS5uYW1lKSkge1xuICAgICAgbGV0IG51bSA9IE51bWJlcihwcm92aW5jZURhdGEuZWNvbk51bSk7XG4gICAgICBpZiAocHJvdmluY2VEYXRhLm5hbWUgPT0gXCLkuIrmtbdcIikge1xuICAgICAgICBudW0gKz0gTnVtYmVyKHByb3ZpbmNlRGF0YS5hc3ltcHRvbU51bSk7XG4gICAgICB9XG4gICAgICBjb25maXJtZWRDb3VudC5zZXQobXVuaWNpcGFsaXR5TGlzdC5nZXQocHJvdmluY2VEYXRhLm5hbWUpLCBudW0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGZvciAoY29uc3QgY2l0eURhdGEgb2YgcHJvdmluY2VEYXRhLmNpdHkpIHtcbiAgICAgIGNvbnN0IHByb3ZpbmNlTmFtZSA9IHByb3ZpbmNlRGF0YS5uYW1lO1xuICAgICAgY29uc3QgY2l0eU5hbWUgPSBjaXR5RGF0YS5uYW1lO1xuICAgICAgY29uc3Qgbm93Q29uZmlybSA9IE51bWJlcihjaXR5RGF0YS5lY29uTnVtKTtcbiAgICAgIGlmIChub3dDb25maXJtID09IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoaWdub3JlTGlzdC5oYXMoY2l0eU5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgbGV0IG5vcm1hbGl6ZWROYW1lID0gY2l0eURhdGEubWFwTmFtZTtcbiAgICAgIGlmICghY2l0eU5hbWVzLmhhcyhub3JtYWxpemVkTmFtZSkpIHtcbiAgICAgICAgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemVDaXR5TmFtZShwcm92aW5jZU5hbWUsIGNpdHlOYW1lKTtcbiAgICAgICAgaWYgKG5vcm1hbGl6ZWROYW1lID09ICcnKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjb25maXJtZWRDb3VudC5oYXMobm9ybWFsaXplZE5hbWUpKSB7XG4gICAgICAgIGNvbmZpcm1lZENvdW50LnNldChub3JtYWxpemVkTmFtZSwgY29uZmlybWVkQ291bnQuZ2V0KG5vcm1hbGl6ZWROYW1lKSArIG5vd0NvbmZpcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uZmlybWVkQ291bnQuc2V0KG5vcm1hbGl6ZWROYW1lLCBub3dDb25maXJtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc29sZS5sb2coJ2NvbmZpcm1lZENvdW50JywgY29uZmlybWVkQ291bnQpO1xuICByZXR1cm4gY29uZmlybWVkQ291bnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2xvcihjb3VudDogbnVtYmVyKTogc3RyaW5nIHtcbiAgaWYgKGNvdW50ID09IDApIHtcbiAgICByZXR1cm4gJyNGRkZGRkYnO1xuICB9XG4gIGZvciAoY29uc3QgW2lkeCwgW3RocmVzaG9sZF1dIG9mIGNvbG9ycy5lbnRyaWVzKCkpIHtcbiAgICBpZiAoaWR4ID09IDApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoY291bnQgPCB0aHJlc2hvbGQpIHtcbiAgICAgIHJldHVybiBjb2xvcnNbaWR4IC0gMV1bMV07XG4gICAgfVxuICB9XG4gIHJldHVybiAnIzQyMDAwMCc7XG59XG5cbmZ1bmN0aW9uIHByaW50Q29uZmlybWVkQ291bnQoKTogdm9pZCB7XG4gIGxvYWREYXRhKCkudGhlbigoZGF0YSkgPT4ge1xuICAgIGdldENvbmZpcm1lZENvdW50KGRhdGEpO1xuICB9KTtcbn1cblxuaWYgKHR5cGVvZiByZXF1aXJlICE9PSAndW5kZWZpbmVkJyAmJiByZXF1aXJlLm1haW4gPT09IG1vZHVsZSkge1xuICBwcmludENvbmZpcm1lZENvdW50KCk7XG59XG4iLCJpbXBvcnQgeyBsb2FkRGF0YSwgZ2V0Q29uZmlybWVkQ291bnQsIGdldENvbG9yIH0gZnJvbSAnLi9sb2FkX2RhdGEnO1xubGV0IG1hcDtcbmxldCBkaXNQcm92aW5jZTtcbmxldCBkaXNDaG9uZ3Fpbmc7XG5sZXQgbGF5ZXI7XG5jb25zdCB2ZXJib3NlID0gZmFsc2U7XG5cbmNvbnN0IHRleHRTdHlsZSA9IHsgYmFja2dyb3VuZENvbG9yOiAnI0ZGRkZGRicgfTtcblxubGV0IGNvbmZpcm1lZENvdW50ID0gbmV3IE1hcCgpO1xuY29uc3QgY2FjaGUgPSBuZXcgTWFwKCk7XG5cbmZ1bmN0aW9uIGdldENvdW50QnlOYW1lKG5hbWUpIHtcbiAgbGV0IGNvdW50ID0gMDtcbiAgaWYgKGNvbmZpcm1lZENvdW50LmhhcyhuYW1lKSkge1xuICAgIGNvdW50ID0gY29uZmlybWVkQ291bnQuZ2V0KG5hbWUpO1xuICB9XG4gIHJldHVybiBjb3VudDtcbn1cblxuZnVuY3Rpb24gZ2V0Q29sb3JCeU5hbWUobmFtZSkge1xuICBjb25zdCBjb2xvciA9IGdldENvbG9yKGdldENvdW50QnlOYW1lKG5hbWUpKTtcbiAgcmV0dXJuIGNvbG9yO1xufVxuXG5mdW5jdGlvbiBpbml0Q292aWRNYXAoKSB7XG4gIG1hcCA9IG5ldyBBTWFwLk1hcCgnY29udGFpbmVyJywge1xuICAgIHpvb206IHdpbmRvdy5zY3JlZW4ud2lkdGggPD0gNjAwID8gMyA6IDQsXG4gICAgY2VudGVyOiBbMTA0LjUsIDM4LjVdLFxuICAgIHBpdGNoOiAwLFxuICAgIHZpZXdNb2RlOiAnM0QnLFxuICB9KTtcblxuICAvLyDliJvlu7rnnIHku73lm77lsYJcbiAgLy8g5o6S6Zmk6YeN5bqGKDUwMDAwMClcbiAgY29uc3QgYWxsUHJvdmluY2VzID0gW1xuICAgICcxMTAwMDAnLFxuICAgICcxMjAwMDAnLFxuICAgICcxMzAwMDAnLFxuICAgICcxNDAwMDAnLFxuICAgICcxNTAwMDAnLFxuICAgICcyMTAwMDAnLFxuICAgICcyMjAwMDAnLFxuICAgICcyMzAwMDAnLFxuICAgICczMTAwMDAnLFxuICAgICczMjAwMDAnLFxuICAgICczMzAwMDAnLFxuICAgICczNDAwMDAnLFxuICAgICczNTAwMDAnLFxuICAgICczNjAwMDAnLFxuICAgICczNzAwMDAnLFxuICAgICc0MTAwMDAnLFxuICAgICc0MjAwMDAnLFxuICAgICc0MzAwMDAnLFxuICAgICc0NDAwMDAnLFxuICAgICc0NTAwMDAnLFxuICAgICc0NjAwMDAnLFxuICAgICc1MTAwMDAnLFxuICAgICc1MjAwMDAnLFxuICAgICc1MzAwMDAnLFxuICAgICc1NDAwMDAnLFxuICAgICc2MTAwMDAnLFxuICAgICc2MjAwMDAnLFxuICAgICc2MzAwMDAnLFxuICAgICc2NDAwMDAnLFxuICAgICc2NTAwMDAnLFxuICAgICc3MTAwMDAnLFxuICAgICc4MTAwMDAnLFxuICAgICc4MjAwMDAnLFxuICBdO1xuICBkaXNQcm92aW5jZSA9IG5ldyBBTWFwLkRpc3RyaWN0TGF5ZXIuUHJvdmluY2Uoe1xuICAgIHpJbmRleDogMTIsXG4gICAgYWRjb2RlOiBhbGxQcm92aW5jZXMsXG4gICAgZGVwdGg6IDEsXG4gICAgc3R5bGVzOiB7XG4gICAgICBmaWxsOiBmdW5jdGlvbiAocHJvcGVydGllcykge1xuICAgICAgICByZXR1cm4gZ2V0Q29sb3JCeU5hbWUocHJvcGVydGllcy5OQU1FX0NITik7XG4gICAgICB9LFxuICAgICAgJ3Byb3ZpbmNlLXN0cm9rZSc6ICdibGFjaycsXG4gICAgICAnY2l0eS1zdHJva2UnOiAnY29ybmZsb3dlcmJsdWUnLCAvLyDkuK3lm73lnLDnuqfluILovrnnlYxcbiAgICAgICdjb3VudHktc3Ryb2tlJzogJ3JnYmEoMjU1LDI1NSwyNTUsMC41KScsIC8vIOS4reWbveWMuuWOv+i+ueeVjFxuICAgIH0sXG4gIH0pO1xuXG4gIGRpc1Byb3ZpbmNlLnNldE1hcChtYXApO1xuXG4gIGRpc0Nob25ncWluZyA9IG5ldyBBTWFwLkRpc3RyaWN0TGF5ZXIuUHJvdmluY2Uoe1xuICAgIHpJbmRleDogMTIsXG4gICAgYWRjb2RlOiBbJzUwMDAwMCddLFxuICAgIGRlcHRoOiAyLFxuICAgIHN0eWxlczoge1xuICAgICAgZmlsbDogZnVuY3Rpb24gKHByb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIGdldENvbG9yQnlOYW1lKHByb3BlcnRpZXMuTkFNRV9DSE4pO1xuICAgICAgfSxcbiAgICAgICdwcm92aW5jZS1zdHJva2UnOiAnYmxhY2snLFxuICAgICAgJ2NpdHktc3Ryb2tlJzogJ2Nvcm5mbG93ZXJibHVlJywgLy8g5Lit5Zu95Zyw57qn5biC6L6555WMXG4gICAgICAnY291bnR5LXN0cm9rZSc6ICdyZ2JhKDI1NSwyNTUsMjU1LDAuNSknLCAvLyDkuK3lm73ljLrljr/ovrnnlYxcbiAgICB9LFxuICB9KTtcblxuICBkaXNDaG9uZ3Fpbmcuc2V0TWFwKG1hcCk7XG4gIG1hcC5vbignY29tcGxldGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgbGF5ZXIgPSBuZXcgQU1hcC5MYWJlbHNMYXllcih7XG4gICAgICBmaXRWaWV3OiB0cnVlLFxuICAgIH0pO1xuICAgIG1hcC5hZGQobGF5ZXIpO1xuICAgIG1hcC5vbignY2xpY2snLCBjbGlja0hhbmRsZXIpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY2xpY2tIYW5kbGVyKGV2KSB7XG4gIGlmICh2ZXJib3NlKSB7XG4gICAgY29uc29sZS5sb2coJ2V2JywgZXYpO1xuICB9XG4gIGNvbnN0IHB4ID0gZXYucGl4ZWw7XG4gIGxldCBwcm9wcyA9IGRpc1Byb3ZpbmNlLmdldERpc3RyaWN0QnlDb250YWluZXJQb3MocHgpO1xuICBpZiAodmVyYm9zZSkge1xuICAgIGNvbnNvbGUubG9nKCdwcm9wczEnLCBwcm9wcyk7XG4gIH1cbiAgaWYgKCFwcm9wcykge1xuICAgIHByb3BzID0gZGlzQ2hvbmdxaW5nLmdldERpc3RyaWN0QnlDb250YWluZXJQb3MocHgpO1xuICB9XG4gIGlmICh2ZXJib3NlKSB7XG4gICAgY29uc29sZS5sb2coJ3Byb3BzMScsIHByb3BzKTtcbiAgfVxuICBpZiAocHJvcHMpIHtcbiAgICBjb25zdCBzZXBlcmF0b3IgPSAnOic7XG4gICAgLy8g5Lqs5rSl5rKq5riv5r6z5Y+wXG4gICAgaWYgKFsnMTEwMDAwJywgJzEyMDAwMCcsICczMTAwMDAnLCAnNzEwMDAwJywgJzgxMDAwMCcsICc4MjAwMDAnXS5pbmNsdWRlcyhwcm9wcy5hZGNvZGVfcHJvLnRvU3RyaW5nKCkpKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gcHJvcHMuTkFNRV9DSE4ucmVwbGFjZSgn5biCJywgJycpICsgc2VwZXJhdG9yICsgZ2V0Q291bnRCeU5hbWUocHJvcHMuTkFNRV9DSE4pO1xuICAgICAgLy9jb25zb2xlLmxvZygndGV4dCcsIHRleHQpO1xuICAgICAgY29uc3QgbGFiZWxNYXJrZXIgPSBuZXcgQU1hcC5MYWJlbE1hcmtlcih7XG4gICAgICAgIHBvc2l0aW9uOiBbcHJvcHMueCwgcHJvcHMueV0sXG4gICAgICAgIHRleHQ6IHsgY29udGVudDogdGV4dCwgc3R5bGU6IHRleHRTdHlsZSB9LFxuICAgICAgICByYW5rOiAyLFxuICAgICAgfSk7XG4gICAgICBsYXllci5hZGQobGFiZWxNYXJrZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyDlsZXnpLrngrnlh7vljLrln5/miYDlnKjnnIHku73mr4/kuKrluILnmoTnl4XkvovmlbDlrZdcbiAgICAgIEFNYXAucGx1Z2luKCdBTWFwLkRpc3RyaWN0U2VhcmNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBpc0Nob25ncWluZyA9IHByb3BzLmFkY29kZV9wcm8udG9TdHJpbmcoKSA9PSAnNTAwMDAwJztcbiAgICAgICAgY29uc3Qgc3ViZGlzdHJpY3QgPSBpc0Nob25ncWluZyA/IDIgOiAxO1xuICAgICAgICAvL2NvbnNvbGUubG9nKCdzdWJkaXN0cmljdCcsIHN1YmRpc3RyaWN0KVxuICAgICAgICBmdW5jdGlvbiBkaXN0cmljdHNIYW5kbGVyKHJlc3VsdCkge1xuICAgICAgICAgIGlmICghaXNDaG9uZ3FpbmcpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgcmVzdWx0LmRpc3RyaWN0TGlzdFswXS5kaXN0cmljdExpc3QpIHtcbiAgICAgICAgICAgICAgbGV0IGNvdW50ID0gZ2V0Q291bnRCeU5hbWUoZW50cnkubmFtZSk7XG4gICAgICAgICAgICAgIGlmIChjb3VudCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IGVudHJ5Lm5hbWUucmVwbGFjZSgn5biCJywgJycpICsgc2VwZXJhdG9yICsgY291bnQ7XG4gICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJ0ZXh0XCIsIHRleHQpO1xuICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGVudHJ5LmNlbnRlcixcbiAgICAgICAgICAgICAgICB0ZXh0OiB7IGNvbnRlbnQ6IHRleHQsIHN0eWxlOiB0ZXh0U3R5bGUgfSxcbiAgICAgICAgICAgICAgICByYW5rOiBlbnRyeS5hZGNvZGUgPT0gcHJvcHMuYWRjb2RlLnRvU3RyaW5nKCkgPyAyIDogMSxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgaWYgKHZlcmJvc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnb3B0aW9uJywgb3B0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb25zdCBsYWJlbE1hcmtlciA9IG5ldyBBTWFwLkxhYmVsTWFya2VyKG9wdGlvbik7XG4gICAgICAgICAgICAgIGxheWVyLmFkZChsYWJlbE1hcmtlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIOmHjeW6humDiuWOv1xuICAgICAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiByZXN1bHQuZGlzdHJpY3RMaXN0WzBdLmRpc3RyaWN0TGlzdFswXS5kaXN0cmljdExpc3QpIHtcbiAgICAgICAgICAgICAgbGV0IGNvdW50ID0gZ2V0Q291bnRCeU5hbWUoZW50cnkubmFtZSk7XG4gICAgICAgICAgICAgIGlmIChjb3VudCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0ge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBlbnRyeS5jZW50ZXIsXG4gICAgICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICAgICAgY29udGVudDogZW50cnkubmFtZSArIHNlcGVyYXRvciArIGNvdW50LFxuICAgICAgICAgICAgICAgICAgc3R5bGU6IHRleHRTdHlsZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJhbms6IGVudHJ5LmFkY29kZSA9PSBwcm9wcy5hZGNvZGUudG9TdHJpbmcoKSA/IDIgOiAxLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBpZiAodmVyYm9zZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdvcHRpb24sIOmHjeW6humDiuWOvycsIG9wdGlvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3QgbGFiZWxNYXJrZXIgPSBuZXcgQU1hcC5MYWJlbE1hcmtlcihvcHRpb24pO1xuICAgICAgICAgICAgICBsYXllci5hZGQobGFiZWxNYXJrZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8g6YeN5bqG5Z+O5Yy6XG4gICAgICAgICAgICBsZXQgY29uZmlybWVkQ291bnQgPSAwO1xuICAgICAgICAgICAgY29uc3QgY2hvbmdxaW5nRG93bnRvd24gPSByZXN1bHQuZGlzdHJpY3RMaXN0WzBdLmRpc3RyaWN0TGlzdFsxXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgY2hvbmdxaW5nRG93bnRvd24uZGlzdHJpY3RMaXN0KSB7XG4gICAgICAgICAgICAgIGNvbmZpcm1lZENvdW50ICs9IGdldENvdW50QnlOYW1lKGVudHJ5Lm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbmZpcm1lZENvdW50ID4gMCkge1xuICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGNob25ncWluZ0Rvd250b3duLmNlbnRlcixcbiAgICAgICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgICAgICBjb250ZW50OiBjaG9uZ3FpbmdEb3dudG93bi5uYW1lICsgc2VwZXJhdG9yICsgY29uZmlybWVkQ291bnQsXG4gICAgICAgICAgICAgICAgICBzdHlsZTogdGV4dFN0eWxlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmFuazogcHJvcHMuYWRjb2RlX2NpdC50b1N0cmluZygpID09ICc1MDAxMDAnID8gMiA6IDEsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGlmICh2ZXJib3NlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ29wdGlvbiwg6YeN5bqG5Z+O5Yy6Jywgb3B0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb25zdCBsYWJlbE1hcmtlciA9IG5ldyBBTWFwLkxhYmVsTWFya2VyKG9wdGlvbik7XG4gICAgICAgICAgICAgIGxheWVyLmFkZChsYWJlbE1hcmtlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRpc3RyaWN0U2VhcmNoID0gbmV3IEFNYXAuRGlzdHJpY3RTZWFyY2goe1xuICAgICAgICAgIGxldmVsOiAnZGlzdHJpY3QnLFxuICAgICAgICAgIHN1YmRpc3RyaWN0OiBzdWJkaXN0cmljdCxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGsgPSBwcm9wcy5hZGNvZGVfcHJvLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChjYWNoZS5nZXQoaykpIHtcbiAgICAgICAgICBkaXN0cmljdHNIYW5kbGVyKGNhY2hlLmdldChrKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlzdHJpY3RTZWFyY2guc2VhcmNoKGssIGZ1bmN0aW9uIChzdGF0dXMsIHJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKHZlcmJvc2UpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3N0YXR1cycsIHN0YXR1cyk7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXN1bHQnLCByZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICAgIGNhY2hlLnNldChrLCByZXN1bHQpO1xuICAgICAgICAgICAgICBkaXN0cmljdHNIYW5kbGVyKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xuICBsb2FkRGF0YSgpLnRoZW4oKGRhdGEpID0+IHtcbiAgICBjb25maXJtZWRDb3VudCA9IGdldENvbmZpcm1lZENvdW50KGRhdGEpO1xuICAgIC8vIGZpeCBzb21lIGJ1Z3Mgb2YgQU1hcFxuICAgIGlmIChjb25maXJtZWRDb3VudC5nZXQoJ+W+kOW3nuW4gicpKSB7XG4gICAgICBjb25maXJtZWRDb3VudC5zZXQoJ+mCs+W3nuW4gicsIGNvbmZpcm1lZENvdW50LmdldCgn5b6Q5bee5biCJykpO1xuICAgIH1cbiAgICBpZiAoY29uZmlybWVkQ291bnQuZ2V0KCfmtY7ljZfluIInKSkge1xuICAgICAgY29uZmlybWVkQ291bnQuc2V0KCfojrHoipzluIInLCBjb25maXJtZWRDb3VudC5nZXQoJ+a1juWNl+W4gicpKTtcbiAgICB9XG4gICAgaW5pdENvdmlkTWFwKCk7XG4gIH0pO1xufSk7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5tZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlLnBhdGhzID0gW107XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiLy8gbW9kdWxlIGNhY2hlIGFyZSB1c2VkIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkXG4vLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMzgpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ1dGlscyIsInNldHRsZSIsImNvb2tpZXMiLCJidWlsZFVSTCIsImJ1aWxkRnVsbFBhdGgiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsInRyYW5zaXRpb25hbERlZmF1bHRzIiwiQ2FuY2VsIiwiY29uZmlnIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbkNhbmNlbGVkIiwicmVxdWVzdERhdGEiLCJkYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJoZWFkZXJzIiwicmVzcG9uc2VUeXBlIiwiZG9uZSIsImNhbmNlbFRva2VuIiwidW5zdWJzY3JpYmUiLCJzaWduYWwiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNGb3JtRGF0YSIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsImZ1bGxQYXRoIiwiYmFzZVVSTCIsInVybCIsIm9ubG9hZGVuZCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzIiwic3RhdHVzVGV4dCIsInZhbHVlIiwiZXJyIiwib3BlbiIsIm1ldGhvZCIsInRvVXBwZXJDYXNlIiwicGFyYW1zIiwicGFyYW1zU2VyaWFsaXplciIsInRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJpbmRleE9mIiwic2V0VGltZW91dCIsIm9uYWJvcnQiLCJvbmVycm9yIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsInRyYW5zaXRpb25hbCIsImNsYXJpZnlUaW1lb3V0RXJyb3IiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInhzcmZDb29raWVOYW1lIiwicmVhZCIsInVuZGVmaW5lZCIsInhzcmZIZWFkZXJOYW1lIiwiZm9yRWFjaCIsInZhbCIsImtleSIsInRvTG93ZXJDYXNlIiwic2V0UmVxdWVzdEhlYWRlciIsImlzVW5kZWZpbmVkIiwib25Eb3dubG9hZFByb2dyZXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWwiLCJ0eXBlIiwiYWJvcnQiLCJzdWJzY3JpYmUiLCJhYm9ydGVkIiwic2VuZCIsImJpbmQiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiYXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJjb250ZXh0IiwiaW5zdGFuY2UiLCJwcm90b3R5cGUiLCJleHRlbmQiLCJjcmVhdGUiLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJWRVJTSU9OIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJpc0F4aW9zRXJyb3IiLCJtZXNzYWdlIiwidGhpcyIsInRvU3RyaW5nIiwiX19DQU5DRUxfXyIsImV4ZWN1dG9yIiwiVHlwZUVycm9yIiwicmVzb2x2ZVByb21pc2UiLCJwcm9taXNlIiwidG9rZW4iLCJ0aGVuIiwiX2xpc3RlbmVycyIsImkiLCJsIiwibGVuZ3RoIiwib25mdWxmaWxsZWQiLCJfcmVzb2x2ZSIsInJlYXNvbiIsInRocm93SWZSZXF1ZXN0ZWQiLCJsaXN0ZW5lciIsInB1c2giLCJpbmRleCIsInNwbGljZSIsInNvdXJjZSIsImMiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJ2YWxpZGF0b3IiLCJ2YWxpZGF0b3JzIiwiZGVmYXVsdHMiLCJpbnRlcmNlcHRvcnMiLCJjb25maWdPclVybCIsImFzc2VydE9wdGlvbnMiLCJzaWxlbnRKU09OUGFyc2luZyIsImJvb2xlYW4iLCJmb3JjZWRKU09OUGFyc2luZyIsInJlcXVlc3RJbnRlcmNlcHRvckNoYWluIiwic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJydW5XaGVuIiwic3luY2hyb25vdXMiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4iLCJjaGFpbiIsIkFycmF5IiwiYXBwbHkiLCJjb25jYXQiLCJzaGlmdCIsIm5ld0NvbmZpZyIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImVycm9yIiwiZ2V0VXJpIiwicmVwbGFjZSIsImhhbmRsZXJzIiwidXNlIiwib3B0aW9ucyIsImVqZWN0IiwiaWQiLCJmbiIsImgiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJlbmhhbmNlRXJyb3IiLCJjb2RlIiwiRXJyb3IiLCJ0cmFuc2Zvcm1EYXRhIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsImNhbGwiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwibWVyZ2UiLCJjb21tb24iLCJhZGFwdGVyIiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ0b0pTT04iLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJudW1iZXIiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJzdGFjayIsImNvbmZpZzEiLCJjb25maWcyIiwiZ2V0TWVyZ2VkVmFsdWUiLCJ0YXJnZXQiLCJpc1BsYWluT2JqZWN0IiwiaXNBcnJheSIsInNsaWNlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInByb3AiLCJ2YWx1ZUZyb21Db25maWcyIiwiZGVmYXVsdFRvQ29uZmlnMiIsIm1lcmdlRGlyZWN0S2V5cyIsIm1lcmdlTWFwIiwiT2JqZWN0Iiwia2V5cyIsImNvbmZpZ1ZhbHVlIiwidmFsaWRhdGVTdGF0dXMiLCJmbnMiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJwcm9jZXNzIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNTdHJlYW0iLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0FycmF5QnVmZmVyVmlldyIsImJ1ZmZlciIsImlzVVJMU2VhcmNoUGFyYW1zIiwiaXNPYmplY3QiLCJyYXdWYWx1ZSIsInBhcnNlciIsImVuY29kZXIiLCJpc1N0cmluZyIsIkpTT04iLCJwYXJzZSIsInRyaW0iLCJlIiwic3RyaW5naWZ5Iiwic3RyaW5naWZ5U2FmZWx5Iiwic3RyaWN0SlNPTlBhcnNpbmciLCJtYXhDb250ZW50TGVuZ3RoIiwibWF4Qm9keUxlbmd0aCIsInRoaXNBcmciLCJhcmdzIiwiYXJndW1lbnRzIiwiZW5jb2RlIiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidiIsImlzRGF0ZSIsInRvSVNPU3RyaW5nIiwiam9pbiIsImhhc2htYXJrSW5kZXgiLCJyZWxhdGl2ZVVSTCIsIndyaXRlIiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJpc051bWJlciIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsImRvY3VtZW50IiwibWF0Y2giLCJSZWdFeHAiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJub3ciLCJ0ZXN0IiwicGF5bG9hZCIsIm9yaWdpblVSTCIsIm1zaWUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInNldEF0dHJpYnV0ZSIsInByb3RvY29sIiwiaG9zdCIsInNlYXJjaCIsImhhc2giLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsImNoYXJBdCIsIndpbmRvdyIsImxvY2F0aW9uIiwicmVxdWVzdFVSTCIsInBhcnNlZCIsIm5vcm1hbGl6ZWROYW1lIiwiaWdub3JlRHVwbGljYXRlT2YiLCJzcGxpdCIsImxpbmUiLCJzdWJzdHIiLCJjYWxsYmFjayIsImFyciIsInRoaW5nIiwiZGVwcmVjYXRlZFdhcm5pbmdzIiwidmVyc2lvbiIsImZvcm1hdE1lc3NhZ2UiLCJvcHQiLCJkZXNjIiwib3B0cyIsImNvbnNvbGUiLCJ3YXJuIiwic2NoZW1hIiwiYWxsb3dVbmtub3duIiwicmVzdWx0IiwiZ2V0UHJvdG90eXBlT2YiLCJpc0Z1bmN0aW9uIiwib2JqIiwiaGFzT3duUHJvcGVydHkiLCJjb25zdHJ1Y3RvciIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwicGlwZSIsInByb2R1Y3QiLCJhc3NpZ25WYWx1ZSIsImEiLCJiIiwic3RyIiwic3RyaXBCT00iLCJjb250ZW50IiwiY2hhckNvZGVBdCIsImRlZmF1bHRPcHRpb25zIiwiZ2VuZXJhdGVDYWxsYmFja0Z1bmN0aW9uIiwiTWF0aCIsImNlaWwiLCJyYW5kb20iLCJjbGVhckZ1bmN0aW9uIiwiZnVuY3Rpb25OYW1lIiwicmVtb3ZlU2NyaXB0Iiwic2NyaXB0SWQiLCJzY3JpcHQiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicmVtb3ZlQ2hpbGQiLCJfdXJsIiwianNvbnBDYWxsYmFjayIsInRpbWVvdXRJZCIsImNhbGxiYWNrRnVuY3Rpb24iLCJqc29ucENhbGxiYWNrRnVuY3Rpb24iLCJvayIsImpzb24iLCJjbGVhclRpbWVvdXQiLCJqc29ucFNjcmlwdCIsImNoYXJzZXQiLCJub25jZSIsInJlZmVycmVyUG9saWN5IiwiYXBwZW5kQ2hpbGQiLCJjaXR5TmFtZXMiLCJTZXQiLCJjaXRpZXMiLCJjaXR5TmFtZVNob3J0VG9GdWxsIiwiTWFwIiwiY2l0eU5hbWUiLCJzZXQiLCJjb2xvcnMiLCJpZ25vcmVMaXN0IiwibXVuaWNpcGFsaXR5TGlzdCIsIm1hbnVhbE1hcHBpbmciLCJtYW51YWxNYXBwaW5nV2l0aFByb3ZpbmNlIiwibG9hZERhdGEiLCJmZXRjaEpzb25wIiwibGlzdCIsImdldCIsIm5vcm1hbGl6ZUNpdHlOYW1lIiwicHJvdmluY2VOYW1lIiwiaGFzIiwibG9nIiwiZ2V0Q29uZmlybWVkQ291bnQiLCJjb25maXJtZWRDb3VudCIsInByb3ZpbmNlRGF0YSIsIm51bSIsIk51bWJlciIsImVjb25OdW0iLCJhc3ltcHRvbU51bSIsImNpdHkiLCJjaXR5RGF0YSIsIm5vd0NvbmZpcm0iLCJtYXBOYW1lIiwiY291bnQiLCJlbnRyaWVzIiwiaWR4IiwidGhyZXNob2xkIiwibWFwIiwiZGlzUHJvdmluY2UiLCJkaXNDaG9uZ3FpbmciLCJsYXllciIsInRleHRTdHlsZSIsImJhY2tncm91bmRDb2xvciIsImNhY2hlIiwiZ2V0Q291bnRCeU5hbWUiLCJnZXRDb2xvckJ5TmFtZSIsImdldENvbG9yIiwiY2xpY2tIYW5kbGVyIiwiZXYiLCJweCIsInBpeGVsIiwicHJvcHMiLCJnZXREaXN0cmljdEJ5Q29udGFpbmVyUG9zIiwic2VwZXJhdG9yIiwiaW5jbHVkZXMiLCJhZGNvZGVfcHJvIiwidGV4dCIsIk5BTUVfQ0hOIiwibGFiZWxNYXJrZXIiLCJBTWFwIiwiTGFiZWxNYXJrZXIiLCJwb3NpdGlvbiIsIngiLCJ5Iiwic3R5bGUiLCJyYW5rIiwiYWRkIiwicGx1Z2luIiwiaXNDaG9uZ3FpbmciLCJzdWJkaXN0cmljdCIsImRpc3RyaWN0c0hhbmRsZXIiLCJlbnRyeSIsImRpc3RyaWN0TGlzdCIsIm9wdGlvbiIsImNlbnRlciIsImFkY29kZSIsImNob25ncWluZ0Rvd250b3duIiwiYWRjb2RlX2NpdCIsImRpc3RyaWN0U2VhcmNoIiwiRGlzdHJpY3RTZWFyY2giLCJsZXZlbCIsImsiLCJ6b29tIiwic2NyZWVuIiwid2lkdGgiLCJwaXRjaCIsInZpZXdNb2RlIiwiRGlzdHJpY3RMYXllciIsIlByb3ZpbmNlIiwiekluZGV4IiwiZGVwdGgiLCJzdHlsZXMiLCJmaWxsIiwicHJvcGVydGllcyIsInNldE1hcCIsIm9uIiwiTGFiZWxzTGF5ZXIiLCJmaXRWaWV3IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImRlZmluaXRpb24iLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwibm1kIiwicGF0aHMiLCJjaGlsZHJlbiIsInMiXSwic291cmNlUm9vdCI6IiJ9